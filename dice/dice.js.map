{"version":3,"sources":["dice.js"],"sourcesContent":["const blockSize = 5;\nconst epsilon = 1e-10;\n\nconst spotSpacing = 0.25;\nconst spotRadius = 0.08;\nconst spotVertexCount = 16;\n\n\n// this order should make the faces come out in |_| order rather than |/| order, but is very hacky\nconst vertices = [[1, 1, 1], [1, -1, 1], [1, -1, -1], [1, 1, -1], [-1, 1, -1], [-1, -1, -1], [-1, -1, 1], [-1, 1, 1]];\n\nconst faces = [\n  [1, [0, 0, 0]],\n  [6, [Math.PI, 0, 0]],\n  [2, [Math.PI / 2, 0, 0]],\n  [5, [-Math.PI / 2, 0, 0]],\n  [3, [0, -Math.PI / 2, 0]],\n  [4, [0, Math.PI / 2, 0]],\n].map(x => {\n  const normal = matrix_mul(rotationMatrix(x[1]), [1, 0, 0]);\n  return [...x, normal, vertices.filter(y => inner_product(normal, y) > epsilon)];\n});\n\nconst spots = [\n  [\n    [0, 0]\n  ],\n  [\n    [-1, -1],\n    [1, 1],\n  ],\n  [\n    [-1, -1],\n    [0, 0],\n    [1, 1],\n  ],\n  [\n    [-1, -1],\n    [-1, 1],\n    [1, -1],\n    [1, 1],\n  ],\n  [\n    [-1, -1],\n    [-1, 1],\n    [1, -1],\n    [1, 1],\n    [0, 0],\n  ],\n  [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ],\n].map(x => x.map(y => y.map(z => z * spotSpacing + 0.5))).map(x => x.map(y => new Array(spotVertexCount).fill().map((z, zIdx) => [y[0] + spotRadius * Math.sin(zIdx * Math.PI * 2 / spotVertexCount), y[1] + spotRadius * Math.cos(zIdx * Math.PI * 2 / spotVertexCount)])));\n\n\nfunction init() {\n  document.querySelectorAll('button,canvas').forEach(x => x.addEventListener('click', execute));\n  document.querySelectorAll('input[type=\"tel\"]').forEach(x => x.addEventListener('change', execute))\n}\n\nfunction rotationMatrix(rot) {\n  return [\n    [\n      Math.cos(rot[0]) * Math.cos(rot[1]),\n      Math.cos(rot[0]) * Math.sin(rot[1]) * Math.sin(rot[2]) - Math.sin(rot[0]) * Math.cos(rot[2]),\n      Math.cos(rot[0]) * Math.sin(rot[1]) * Math.cos(rot[2]) + Math.sin(rot[0]) * Math.sin(rot[2]),\n    ],\n    [\n      Math.sin(rot[0]) * Math.cos(rot[1]),\n      Math.sin(rot[0]) * Math.sin(rot[1]) * Math.sin(rot[2]) + Math.cos(rot[0]) * Math.cos(rot[2]),\n      Math.sin(rot[0]) * Math.sin(rot[1]) * Math.cos(rot[2]) - Math.cos(rot[0]) * Math.sin(rot[2]),\n    ],\n    [\n      -Math.sin(rot[1]),\n      Math.cos(rot[1]) * Math.sin(rot[2]),\n      Math.cos(rot[1]) * Math.cos(rot[2]),\n    ],\n  ];\n}\n\n// actually ignore the camera direction and orthographic-project into y-z plane\nfunction project(x, cameraDirection) {\n  return [x[1], x[2]];\n}\n\nfunction rotate(x, rot) {\n  return matrix_mul(x, rotationMatrix(rot));\n}\n\nfunction inner_product(a, b) {\n  let p = 0;\n  for(let i = 0; i < a.length; i++) {\n    p += a[i] * b[i]; // no bounds check, caller don't be stupid please\n  }\n  return p;\n}\n\nfunction matrix_mul(matrix, x) {\n  return x.map((y, yIdx) => matrix[yIdx].map((z, zIdx) => z * x[zIdx]).reduce((a, b) => a + b, 0));\n}\n\nlet timeout;\nfunction draw(rot, trajectory) {\n  timeout && clearTimeout(timeout);\n  const canvas = document.getElementById('canvas');\n  const context = canvas.getContext('2d');\n  context.clearRect(0, 0, canvas.width, canvas.height);\n\n  const rotMatrix = rotationMatrix(rot);\n\n  cameraDirection = [-1, 0, 0];\n  const currentFaces = faces.map((x, idx) => [x[0], matrix_mul(rotMatrix, x[2]), x[3]]).filter(x => inner_product(cameraDirection, x[1]) < -epsilon).map(x => [x[0], x[1], x[2].map(y => matrix_mul(rotMatrix, y))]);\n  const center = Math.min(canvas.height, canvas.width) / 2;\n  const scaleFactor = center / 2;\n\n  currentFaces.forEach(f => {\n    const projectedVertices = f[2].map(x => project(x, cameraDirection).map(x => x * scaleFactor + center));\n    context.beginPath();\n    context.moveTo(...projectedVertices[0]);\n    projectedVertices.slice(1).forEach(pt => context.lineTo(...pt));\n    context.closePath();\n    context.stroke();\n    context.fillStyle = \"#c00\";\n    context.fill();\n\n    const faceSpots = spots[f[0] - 1];\n    if(faceSpots && faceSpots.length > 0){\n      const basis = [projectedVertices[1], projectedVertices[3]].map(x => x.map((y, idx) => y - projectedVertices[0][idx]));\n\n      faceSpots.forEach(spotOutline => {\n        context.beginPath();\n\n        const projectedOutline = spotOutline.map(pt => {\n          const pos = [...projectedVertices[0]];\n          for(let i = 0; i < 2; i++) {\n            for(let j = 0; j < 2; j++) {\n              pos[i] += pt[j] * basis[j][i];\n            }\n          }\n          return pos;\n        });\n\n        context.beginPath();\n        context.moveTo(...projectedOutline[0]);\n        projectedOutline.slice(1).forEach(pt => context.lineTo(...pt));\n        context.closePath();\n        context.fillStyle = \"white\";\n        context.fill();\n      });\n    }\n  });\n\n  if(trajectory) {\n    if(trajectory.length > 0) {\n      timeout = setTimeout(() => draw(trajectory.shift(), trajectory), 30);\n    }\n  } else {\n    timeout = setTimeout(() => draw([rot[0] + 0.06, rot[1], rot[2]]), 30);\n  }\n}\n\n\nfunction execute() {\n  const count = parseInt(document.getElementById('count').value) || 1;\n  const sides = parseInt(document.getElementById('sides').value) || 6;\n\n  const results = new Array(count).fill().map(() => Math.floor(Math.random() * sides + 1));\n  const blocks = new Array(Math.ceil(count / blockSize)).fill().map((x, idx) => results.slice(idx * blockSize, (idx + 1) * blockSize));\n  const container = document.getElementById('results');\n  container.replaceChildren();\n\n  blocks.forEach(x => {\n    const blockDiv = document.createElement('div');\n    blockDiv.className = 'roll-group';\n    x.forEach(y => {\n      const div = document.createElement('div');\n      div.className = 'roll';\n      div.append(y);\n      blockDiv.appendChild(div);\n    });\n    container.appendChild(blockDiv);\n  });\n\n  if(sides == 6) {\n    const firstResult = blocks[0][0];\n    const targetRotation = faces.find(x => x[0] == firstResult)[1].map(x => -x);\n    const spin = new Array(3).fill().map(() => Math.random() * Math.PI * 2);\n    const trajectory = [targetRotation];\n    let f = 0.01;\n    const imax = 40 + Math.floor(40 * Math.random());\n    for(let i = 0; i < 50; i++) {\n      f *= 1.05;\n      trajectory.unshift(trajectory[0].map((x, idx) => x + spin[idx] * f));\n    }\n    draw(trajectory.shift(), trajectory);\n  } else {\n    draw(new Array(3).fill().map(() => Math.random() * Math.PI * 2));\n  }\n}\n\ninit();\n"],"names":["blockSize","epsilon","spotSpacing","spotRadius","spotVertexCount","vertices","faces","Math","PI","map","x","normal","matrix_mul","rotationMatrix","filter","y","inner_product","spots","z","Array","fill","zIdx","sin","cos","init","document","querySelectorAll","forEach","addEventListener","execute","rot","project","cameraDirection","rotate","a","b","let","p","i","length","matrix","yIdx","reduce","timeout","draw","trajectory","clearTimeout","canvas","getElementById","context","getContext","rotMatrix","clearRect","width","height","currentFaces","idx","center","min","scaleFactor","f","projectedVertices","beginPath","moveTo","slice","pt","lineTo","closePath","stroke","fillStyle","faceSpots","basis","spotOutline","projectedOutline","pos","j","setTimeout","shift","count","parseInt","value","sides","results","floor","random","blocks","ceil","container","replaceChildren","blockDiv","createElement","className","div","append","appendChild","firstResult","targetRotation","find","spin","unshift"],"mappings":"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"}